/*
 * Midgard Public API
 *
 * The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * Contact: devs@thorchain.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkInfo {
    #[serde(rename = "bondMetrics", skip_serializing_if = "Option::is_none")]
    pub bond_metrics: Option<crate::models::BondMetrics>,
    /// Array of Active Bonds
    #[serde(rename = "activeBonds", skip_serializing_if = "Option::is_none")]
    pub active_bonds: Option<Vec<String>>,
    /// Array of Standby Bonds
    #[serde(rename = "standbyBonds", skip_serializing_if = "Option::is_none")]
    pub standby_bonds: Option<Vec<String>>,
    /// Total Rune Staked in Pools
    #[serde(rename = "totalStaked", skip_serializing_if = "Option::is_none")]
    pub total_staked: Option<String>,
    /// Number of Active Nodes
    #[serde(rename = "activeNodeCount", skip_serializing_if = "Option::is_none")]
    pub active_node_count: Option<i32>,
    /// Number of Standby Nodes
    #[serde(rename = "standbyNodeCount", skip_serializing_if = "Option::is_none")]
    pub standby_node_count: Option<i32>,
    /// Total left in Reserve
    #[serde(rename = "totalReserve", skip_serializing_if = "Option::is_none")]
    pub total_reserve: Option<String>,
    #[serde(rename = "poolShareFactor", skip_serializing_if = "Option::is_none")]
    pub pool_share_factor: Option<String>,
    #[serde(rename = "blockRewards", skip_serializing_if = "Option::is_none")]
    pub block_rewards: Option<crate::models::BlockRewards>,
    #[serde(rename = "bondingROI", skip_serializing_if = "Option::is_none")]
    pub bonding_roi: Option<String>,
    #[serde(rename = "stakingROI", skip_serializing_if = "Option::is_none")]
    pub staking_roi: Option<String>,
    #[serde(rename = "nextChurnHeight", skip_serializing_if = "Option::is_none")]
    pub next_churn_height: Option<String>,
    /// The remaining time of pool activation (in blocks)
    #[serde(rename = "poolActivationCountdown", skip_serializing_if = "Option::is_none")]
    pub pool_activation_countdown: Option<i64>,
}

impl NetworkInfo {
    pub fn new() -> NetworkInfo {
        NetworkInfo {
            bond_metrics: None,
            active_bonds: None,
            standby_bonds: None,
            total_staked: None,
            active_node_count: None,
            standby_node_count: None,
            total_reserve: None,
            pool_share_factor: None,
            block_rewards: None,
            bonding_roi: None,
            staking_roi: None,
            next_churn_height: None,
            pool_activation_countdown: None,
        }
    }
}


