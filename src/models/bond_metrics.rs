/*
 * Midgard Public API
 *
 * The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * Contact: devs@thorchain.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BondMetrics {
    /// Total bond of active nodes
    #[serde(rename = "totalActiveBond", skip_serializing_if = "Option::is_none")]
    pub total_active_bond: Option<String>,
    /// Average bond of active nodes
    #[serde(rename = "averageActiveBond", skip_serializing_if = "Option::is_none")]
    pub average_active_bond: Option<String>,
    /// Median bond of active nodes
    #[serde(rename = "medianActiveBond", skip_serializing_if = "Option::is_none")]
    pub median_active_bond: Option<String>,
    /// Minumum bond of active nodes
    #[serde(rename = "minimumActiveBond", skip_serializing_if = "Option::is_none")]
    pub minimum_active_bond: Option<String>,
    /// Maxinum bond of active nodes
    #[serde(rename = "maximumActiveBond", skip_serializing_if = "Option::is_none")]
    pub maximum_active_bond: Option<String>,
    /// Total bond of standby nodes
    #[serde(rename = "totalStandbyBond", skip_serializing_if = "Option::is_none")]
    pub total_standby_bond: Option<String>,
    /// Average bond of standby nodes
    #[serde(rename = "averageStandbyBond", skip_serializing_if = "Option::is_none")]
    pub average_standby_bond: Option<String>,
    /// Median bond of standby nodes
    #[serde(rename = "medianStandbyBond", skip_serializing_if = "Option::is_none")]
    pub median_standby_bond: Option<String>,
    /// Minumum bond of standby nodes
    #[serde(rename = "minimumStandbyBond", skip_serializing_if = "Option::is_none")]
    pub minimum_standby_bond: Option<String>,
    /// Maximum bond of standby nodes
    #[serde(rename = "maximumStandbyBond", skip_serializing_if = "Option::is_none")]
    pub maximum_standby_bond: Option<String>,
}

impl BondMetrics {
    pub fn new() -> BondMetrics {
        BondMetrics {
            total_active_bond: None,
            average_active_bond: None,
            median_active_bond: None,
            minimum_active_bond: None,
            maximum_active_bond: None,
            total_standby_bond: None,
            average_standby_bond: None,
            median_standby_bond: None,
            minimum_standby_bond: None,
            maximum_standby_bond: None,
        }
    }
}


