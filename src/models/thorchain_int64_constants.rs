/*
 * Midgard Public API
 *
 * The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * Contact: devs@thorchain.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ThorchainInt64Constants {
    #[serde(rename = "BadValidatorRate", skip_serializing_if = "Option::is_none")]
    pub bad_validator_rate: Option<i64>,
    #[serde(rename = "BlocksPerYear", skip_serializing_if = "Option::is_none")]
    pub blocks_per_year: Option<i64>,
    #[serde(rename = "DesireValidatorSet", skip_serializing_if = "Option::is_none")]
    pub desire_validator_set: Option<i64>,
    #[serde(rename = "DoubleSignMaxAge", skip_serializing_if = "Option::is_none")]
    pub double_sign_max_age: Option<i64>,
    #[serde(rename = "EmissionCurve", skip_serializing_if = "Option::is_none")]
    pub emission_curve: Option<i64>,
    #[serde(rename = "FailKeySignSlashPoints", skip_serializing_if = "Option::is_none")]
    pub fail_key_sign_slash_points: Option<i64>,
    #[serde(rename = "FailKeygenSlashPoints", skip_serializing_if = "Option::is_none")]
    pub fail_keygen_slash_points: Option<i64>,
    #[serde(rename = "FundMigrationInterval", skip_serializing_if = "Option::is_none")]
    pub fund_migration_interval: Option<i64>,
    #[serde(rename = "JailTimeKeygen", skip_serializing_if = "Option::is_none")]
    pub jail_time_keygen: Option<i64>,
    #[serde(rename = "JailTimeKeysign", skip_serializing_if = "Option::is_none")]
    pub jail_time_keysign: Option<i64>,
    #[serde(rename = "LackOfObservationPenalty", skip_serializing_if = "Option::is_none")]
    pub lack_of_observation_penalty: Option<i64>,
    #[serde(rename = "MinimumBondInRune", skip_serializing_if = "Option::is_none")]
    pub minimum_bond_in_rune: Option<i64>,
    #[serde(rename = "MinimumNodesForBFT", skip_serializing_if = "Option::is_none")]
    pub minimum_nodes_for_bft: Option<i64>,
    #[serde(rename = "MinimumNodesForYggdrasil", skip_serializing_if = "Option::is_none")]
    pub minimum_nodes_for_yggdrasil: Option<i64>,
    #[serde(rename = "NewPoolCycle", skip_serializing_if = "Option::is_none")]
    pub new_pool_cycle: Option<i64>,
    #[serde(rename = "ObserveSlashPoints", skip_serializing_if = "Option::is_none")]
    pub observe_slash_points: Option<i64>,
    #[serde(rename = "OldValidatorRate", skip_serializing_if = "Option::is_none")]
    pub old_validator_rate: Option<i64>,
    #[serde(rename = "RotatePerBlockHeight", skip_serializing_if = "Option::is_none")]
    pub rotate_per_block_height: Option<i64>,
    #[serde(rename = "RotateRetryBlocks", skip_serializing_if = "Option::is_none")]
    pub rotate_retry_blocks: Option<i64>,
    #[serde(rename = "SigningTransactionPeriod", skip_serializing_if = "Option::is_none")]
    pub signing_transaction_period: Option<i64>,
    #[serde(rename = "StakeLockUpBlocks", skip_serializing_if = "Option::is_none")]
    pub stake_lock_up_blocks: Option<i64>,
    #[serde(rename = "TransactionFee", skip_serializing_if = "Option::is_none")]
    pub transaction_fee: Option<i64>,
    #[serde(rename = "ValidatorRotateInNumBeforeFull", skip_serializing_if = "Option::is_none")]
    pub validator_rotate_in_num_before_full: Option<i64>,
    #[serde(rename = "ValidatorRotateNumAfterFull", skip_serializing_if = "Option::is_none")]
    pub validator_rotate_num_after_full: Option<i64>,
    #[serde(rename = "ValidatorRotateOutNumBeforeFull", skip_serializing_if = "Option::is_none")]
    pub validator_rotate_out_num_before_full: Option<i64>,
    #[serde(rename = "WhiteListGasAsset", skip_serializing_if = "Option::is_none")]
    pub white_list_gas_asset: Option<i64>,
    #[serde(rename = "YggFundLimit", skip_serializing_if = "Option::is_none")]
    pub ygg_fund_limit: Option<i64>,
}

impl ThorchainInt64Constants {
    pub fn new() -> ThorchainInt64Constants {
        ThorchainInt64Constants {
            bad_validator_rate: None,
            blocks_per_year: None,
            desire_validator_set: None,
            double_sign_max_age: None,
            emission_curve: None,
            fail_key_sign_slash_points: None,
            fail_keygen_slash_points: None,
            fund_migration_interval: None,
            jail_time_keygen: None,
            jail_time_keysign: None,
            lack_of_observation_penalty: None,
            minimum_bond_in_rune: None,
            minimum_nodes_for_bft: None,
            minimum_nodes_for_yggdrasil: None,
            new_pool_cycle: None,
            observe_slash_points: None,
            old_validator_rate: None,
            rotate_per_block_height: None,
            rotate_retry_blocks: None,
            signing_transaction_period: None,
            stake_lock_up_blocks: None,
            transaction_fee: None,
            validator_rotate_in_num_before_full: None,
            validator_rotate_num_after_full: None,
            validator_rotate_out_num_before_full: None,
            white_list_gas_asset: None,
            ygg_fund_limit: None,
        }
    }
}


