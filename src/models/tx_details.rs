/*
 * Midgard Public API
 *
 * The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * Contact: devs@thorchain.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TxDetails {
    #[serde(rename = "pool", skip_serializing_if = "Option::is_none")]
    pub pool: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "in", skip_serializing_if = "Option::is_none")]
    pub _in: Option<crate::models::Tx>,
    #[serde(rename = "out", skip_serializing_if = "Option::is_none")]
    pub out: Option<Vec<crate::models::Tx>>,
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<i64>,
    #[serde(rename = "gas", skip_serializing_if = "Option::is_none")]
    pub gas: Option<crate::models::Gas>,
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<crate::models::Option>,
    #[serde(rename = "height", skip_serializing_if = "Option::is_none")]
    pub height: Option<String>,
    #[serde(rename = "events", skip_serializing_if = "Option::is_none")]
    pub events: Option<crate::models::Event>,
}

impl TxDetails {
    pub fn new() -> TxDetails {
        TxDetails {
            pool: None,
            _type: None,
            status: None,
            _in: None,
            out: None,
            date: None,
            gas: None,
            options: None,
            height: None,
            events: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "swap")]
    Swap,
    #[serde(rename = "stake")]
    Stake,
    #[serde(rename = "unstake")]
    Unstake,
    #[serde(rename = "rewards")]
    Rewards,
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "pool")]
    Pool,
    #[serde(rename = "gas")]
    Gas,
    #[serde(rename = "refund")]
    Refund,
    #[serde(rename = "doubleSwap")]
    DoubleSwap,
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "refund")]
    Refund,
}

